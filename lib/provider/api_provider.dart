import 'package:cueue/api/global/requester/dio_creator.dart';
import 'package:cueue/api/global/requester/dio_creator_impl.dart';
import 'package:cueue/api/hierarchy/content/create_content_api.dart';
import 'package:cueue/api/hierarchy/content/get_bytes_from_uri_api.dart';
import 'package:cueue/api/hierarchy/invitation/accept_invitation_api.dart';
import 'package:cueue/api/hierarchy/invitation/create_invitation_api.dart';
import 'package:cueue/api/hierarchy/invitation/get_invitation_api.dart';
import 'package:cueue/api/hierarchy/menu/create_menu_api.dart';
import 'package:cueue/api/hierarchy/menu/delete_menu_api.dart';
import 'package:cueue/api/hierarchy/menu/get_menu_api.dart';
import 'package:cueue/api/hierarchy/menu/get_menus_api.dart';
import 'package:cueue/api/hierarchy/menu/update_menu_api.dart';
import 'package:cueue/api/hierarchy/recipe/create_recipe_api.dart';
import 'package:cueue/api/hierarchy/recipe/delete_recipe_api.dart';
import 'package:cueue/api/hierarchy/recipe/get_recipe_api.dart';
import 'package:cueue/api/hierarchy/recipe/get_recipes_api.dart';
import 'package:cueue/api/hierarchy/recipe/update_recipe_api.dart';
import 'package:cueue/api/hierarchy/tag/create_tag_api.dart';
import 'package:cueue/api/hierarchy/tag/delete_tag_api.dart';
import 'package:cueue/api/hierarchy/tag/get_tag_api.dart';
import 'package:cueue/api/hierarchy/tag/get_tags_api.dart';
import 'package:cueue/api/hierarchy/tag/order_tag_api.dart';
import 'package:cueue/api/hierarchy/tag/update_tag_api.dart';
import 'package:cueue/api/hierarchy/user/create_user_api.dart';
import 'package:cueue/api/hierarchy/user/get_user_api.dart';
import 'package:cueue/api/hierarchy/user/update_user_api.dart';
import 'package:cueue/api/hierarchy/workspace/create_workspace_api.dart';
import 'package:cueue/api/hierarchy/workspace/update_workspace_api.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

final dioCreatorProvider = Provider<DioCreator>((_) => DioCreatorImpl());
final getUserApiProvider = Provider((ref) => GetUserApi(ref.read(dioCreatorProvider)));
final createUserApiProvider = Provider((ref) => CreateUserApi(ref.read(dioCreatorProvider)));
final updateUserApiProvider = Provider((ref) => UpdateUserApi(ref.read(dioCreatorProvider)));
final getRecipesApiProvider = Provider((ref) => GetRecipesApi(ref.read(dioCreatorProvider)));
final getRecipeApiProvider = Provider((ref) => GetRecipeApi(ref.read(dioCreatorProvider)));
final getTagApiProvider = Provider((ref) => GetTagApi(ref.read(dioCreatorProvider)));
final getTagsApiProvider = Provider((ref) => GetTagsApi(ref.read(dioCreatorProvider)));
final getMenuApiProvider = Provider((ref) => GetMenuApi(ref.read(dioCreatorProvider)));
final getMenusApiProvider = Provider((ref) => GetMenusApi(ref.read(dioCreatorProvider)));
final createTagApiProvider = Provider((ref) => CreateTagApi(ref.read(dioCreatorProvider)));
final updateTagApiProvider = Provider((ref) => UpdateTagApi(ref.read(dioCreatorProvider)));
final deleteTagApiProvider = Provider((ref) => DeleteTagApi(ref.read(dioCreatorProvider)));
final createRecipeApiProvider = Provider((ref) => CreateRecipeApi(ref.read(dioCreatorProvider)));
final updateRecipeApiProvider = Provider((ref) => UpdateRecipeApi(ref.read(dioCreatorProvider)));
final deleteRecipeApiProvider = Provider((ref) => DeleteRecipeApi(ref.read(dioCreatorProvider)));
final createMenuApiProvider = Provider((ref) => CreateMenuApi(ref.read(dioCreatorProvider)));
final updateMenuApiProvider = Provider((ref) => UpdateMenuApi(ref.read(dioCreatorProvider)));
final deleteMenuApiProvider = Provider((ref) => DeleteMenuApi(ref.read(dioCreatorProvider)));
final createContentApiProvider = Provider((ref) => CreateContentApi(ref.read(dioCreatorProvider)));
final orderTagApiProvider = Provider((ref) => OrderTagApi(ref.read(dioCreatorProvider)));
final createWorkspaceApiProvider = Provider((ref) => CreateWorkspaceApi(ref.read(dioCreatorProvider)));
final updateWorkspaceApiProvider = Provider((ref) => UpdateWorkspaceApi(ref.read(dioCreatorProvider)));
final createInvitationApiProvider = Provider((ref) => CreateInvitationApi(ref.read(dioCreatorProvider)));
final getInvitationApiProvider = Provider((ref) => GetInvitationApi(ref.read(dioCreatorProvider)));
final acceptInvitationApiProvider = Provider((ref) => AcceptInvitationApi(ref.read(dioCreatorProvider)));
final getBytesFromUriApiProvider = Provider((ref) => const GetBytesFromUriApi());
