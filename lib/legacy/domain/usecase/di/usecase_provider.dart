import 'package:cueue/legacy/data/repository/di/repository_provider.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/auth/sign_out_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/auth/sign_out_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/content/create_content_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/content/create_content_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/menu/follow_all_menus_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/menu/follow_all_menus_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/menu/refresh_all_menus_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/menu/refresh_all_menus_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/menu/request_additional_all_menus_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/menu/request_additional_all_menus_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/create_recipe_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/create_recipe_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/delete_recipe_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/delete_recipe_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/follow_all_recipes_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/follow_all_recipes_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/refresh_all_recipes_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/refresh_all_recipes_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/request_additional_all_recipes_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/request_additional_all_recipes_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/update_recipe_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/recipe/update_recipe_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/tag/follow_tags_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/tag/follow_tags_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/tag/refresh_tags_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/tag/refresh_tags_usecase_impl.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/tag/reorder_tag_usecase.dart';
import 'package:cueue/legacy/domain/usecase/hierarchy/tag/reorder_tag_usecase_impl.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';

final signOutUseCaseProvider = Provider<SignOutUseCase>((ref) => SignOutUseCaseImpl(ref.read(authorizeRepositoryProvider)));
final followTagsUseCaseProvider = Provider<FollowTagsUseCase>((ref) => FollowTagsUseCaseImpl(ref.read(tagRepositoryProvider)));
final refreshTagsUseCaseProvider = Provider<RefreshTagsUseCase>((ref) => RefreshTagsUseCaseImpl(ref.read(tagRepositoryProvider)));
final followAllRecipesUseCaseProvider = Provider<FollowAllRecipesUseCase>((ref) => FollowAllRecipesUseCaseImpl(ref.read(recipeRepositoryProvider)));
final refreshAllRecipesUseCaseProvider = Provider<RefreshAllRecipesUseCase>((ref) => RefreshAllRecipesUseCaseImpl(ref.read(recipeRepositoryProvider)));
final requestAdditionalAllRecipesUseCaseProvider = Provider<RequestAdditionalAllRecipesUseCase>((ref) => RequestAdditionalAllRecipesUseCaseImpl(ref.read(recipeRepositoryProvider)));
final followAllMenusUseCaseProvider = Provider<FollowAllMenusUseCase>((ref) => FollowAllMenusUseCaseImpl(ref.read(menuRepositoryProvider)));
final refreshAllMenusUseCaseProvider = Provider<RefreshAllMenusUseCase>((ref) => RefreshAllMenusUseCaseImpl(ref.read(menuRepositoryProvider)));
final requestAdditionalAllMenusUseCaseProvider = Provider<RequestAdditionalAllMenusUseCase>((ref) => RequestAdditionalAllMenusUseCaseImpl(ref.read(menuRepositoryProvider)));
final createRecipeUseCaseProvider = Provider<CreateRecipeUseCase>((ref) => CreateRecipeUseCaseImpl(ref.read(recipeRepositoryProvider)));
final updateRecipeUseCaseProvider = Provider<UpdateRecipeUseCase>((ref) => UpdateRecipeUseCaseImpl(ref.read(recipeRepositoryProvider)));
final deleteRecipeUseCaseProvider = Provider<DeleteRecipeUseCase>((ref) => DeleteRecipeUseCaseImpl(ref.read(recipeRepositoryProvider)));
final createContentUseCaseProvider = Provider<CreateContentUseCase>((ref) => CreateContentUseCaseImpl(ref.read(contentRepositoryProvider)));
final reorderTagUseCaseProvider = Provider<ReorderTagUseCase>((ref) => ReorderTagUseCaseImpl(ref.read(tagRepositoryProvider)));
